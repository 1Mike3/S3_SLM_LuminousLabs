@startuml 01

' left to right direction

    package Application {

        class App {
            -config: Config
            +main()
            -createGame(): Game
            -startGame(Game): void
            -init(void): Config
        }


    package Common {
        +struct Result <T,E>{
            +ok(value: T): Result<T,E>
            +err(error: E): Result<T,E>
            ifErr(consumer: Consumer<E>): Result<T,E>
            ifOk(consumer: Consumer<T>): Result<T,E>
            map(func: Function<T,U>): Result<U,E>
            ok(T): Result<T,E>
            unwrap(): T
        }
    }

    package Games {
        'Game
        together{
            +interface GameFactory {
                createGame(io: GameIo, gameType: GameType): Result<Game, String>
            }

            +interface Game {
                startGame(): void
                getGameState(): GameState
            }

            +enum GameType{
                TicTacToe_1v1
            }

            #enum GameState {
                CREATED
                RUNNING
                DONE
                ABORTED
            }

            #class TicTacToe_1v1 {
                #TicTacToe_1v1(board: Board, io: GameIo, players: List<Player>)
            }

            #class TicTacToe_1vAi {
                #TicTacToe_1v1(board: Board, io: GameIo, players: List<Player>)
            }
        }

        'GameIO
        together{
            +interface GameIo {
                getInt(): Result<int, String>
                getString(): Result<String, String>
                putString(msg: String): Result<void, String>
            }

            #class GameIoImp {
                GameIoImp(in: InputStream, out: OutputStream)
            }
        }

        'Player
        together{
            #interface Player {
                makeMove(board: Board): Result<void, String>
            }

            #class HumanPlayer {
                #HumanPlayer(io: GameIo)
            }    
            
            #class AiPlayer {
                #AiPlayer(io: GameIo)
            }

        }

        'Board
        together{
            #enum BoardState {
                CREATED
                RUNNING
                DONE
            }

            #enum PlayerState {
                UNDEFINED
                LOSS
                DRAW
                WIN
            }

            #interface Board {
                addMove(x: int, y: int): bool
                getBoardValues(): char[][]
                getBoardState(): BoardState
                getPlayerState(player: Player): PlayerState
            }

            #class BoardImpl {
                #BoardImpl(io: GameIo)
            }
        }
    }
}

App -down-> GameFactory : > createGame()
App -> Game : > startGame()

GameFactory -down-> Game
GameFactory -right-> GameType

Game -right-> GameState 
Game <|-down- TicTacToe_1v1 
Game <|-down- TicTacToe_1vAi 

Board -left-> PlayerState
Board -right-> BoardState
Board <|-down- BoardImpl

GameIo <|-down- GameIoImp

Player <|-down- HumanPlayer
Player <|-down- AiPlayer

@enduml